import 'dart:convert';
import 'dart:io';

import 'package:http/http.dart' as http;
import '/Controller/beans.dart';

// Singleton class for Moodle API access.
class MoodleApiSingleton 
{
  // Constants for Moodle API.
  static const serverUrl = '/webservice/rest/server.php?wstoken=';
  static const jsonFormat = '&moodlewsrestformat=json';
  static const errorKey = 'error';

  // The singleton instance.
  static final MoodleApiSingleton _instance = MoodleApiSingleton._internal();

  // User token is stored here.
  String? _userToken;
  // User info
  String? moodleURL;
  String? moodleUserName;
  String? moodleFirstName;
  String? moodleLastName;
  String? moodleSiteName;
  String? moodleFullName;
  String? moodleProfileImage;

  // Singleton accessor.
  factory MoodleApiSingleton() {
    return _instance;
  }

  // Internal constructor.
  MoodleApiSingleton._internal();

  // Check if user has logged in (if singleton has a token).
  bool isLoggedIn() {
    return _userToken == null;
  }

  // Log in to Moodle and retrieve the user token. Throws HttpException if login failed.
  Future<void> login(String username, String password, String baseURL) async {
    final response = await http.get(Uri.parse(
        '$baseURL/login/token.php?username=$username&password=$password&service=moodle_mobile_app'
    ));
    Map<String, dynamic> data = jsonDecode(response.body);
    if (response.statusCode != 200) {
      throw HttpException(response.body);
    } else if (data.containsKey(errorKey)) {
      throw HttpException(data[errorKey]);
    }
    _userToken = data['token'];
    moodleURL = baseURL;

    //get user info
    final userinforesponse = await http.get(Uri.parse(
        '$moodleURL$serverUrl$_userToken$jsonFormat&wsfunction=core_webservice_get_site_info'
    ));
    if (userinforesponse.statusCode != 200) {
      throw HttpException(userinforesponse.body);
    }
    Map<String, dynamic> userData = jsonDecode(userinforesponse.body);
    moodleUserName = userData['username'];
    moodleFirstName = userData['firstname'];
    moodleLastName = userData['lastname'];
    moodleSiteName = userData['sitename'];
    moodleFullName = userData['fullname'];
    moodleProfileImage = userData['userpictureurl'];

  }

  // Log out of Moodle by deleting the stored user token.
  void logout() {
    _userToken = null;
  }

  // Get list of courses the user is enrolled in. Throws HttpException if request fails.
  Future<List<Course>> getCourses() async {
    if (_userToken == null) throw StateError('User not logged in to Moodle');
    var moodleURL = MoodleApiSingleton().moodleURL;
    final response = await http.get(Uri.parse(
        // '$moodleURL$serverUrl$_userToken$jsonFormat&wsfunction=core_course_get_courses_by_field'
        '$moodleURL$serverUrl$_userToken$jsonFormat&wsfunction=core_course_get_enrolled_courses_by_timeline_classification&classification=inprogress'
    ));
    if (response.statusCode != 200) {
      throw HttpException(response.body);
    }
   
  // Decode the response body
  var decodedJson = jsonDecode(response.body);
  // Check if the response is a list or a map containing a list
  List<Course> courses;
  if (decodedJson is List) {
    // If the response is directly a list
    courses = decodedJson.map((i) => Course.fromJson(i)).toList();
  } else if (decodedJson is Map<String, dynamic>) {
    // If the response is a map containing a list of courses
    var courseList = decodedJson['courses'] as List<dynamic>;
    courses = courseList.map((i) => Course.fromJson(i)).toList();
  } else {
    throw StateError('Unexpected response format');
  }
    return courses;
  }

  // Import XML quiz into the specified course using learninglens plugin.
  Future<void> importQuizQuestions(String courseid, String quizXml) async {
    if (_userToken == null) throw StateError('User not logged in to Moodle');

    final http.Response response = await http.post(Uri.parse(
      '$moodleURL$serverUrl$_userToken$jsonFormat&wsfunction=local_learninglens_import_questions&courseid=$courseid&questionxml=$quizXml'
    ));
    if (response.statusCode != 200) {
      throw HttpException(response.body);
    }
    if (response.body.contains('error')) {
      throw HttpException(response.body);
    }
  }
}